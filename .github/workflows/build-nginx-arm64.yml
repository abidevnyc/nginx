name: Build Nginx for Windows ARM64 with LLVM

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest  # 使用 Ubuntu 作为构建环境

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install LLVM and Clang for cross-compilation
      run: |
        sudo apt update
        sudo apt install -y clang llvm lld build-essential

    - name: Install dependencies for Nginx
      run: |
        sudo apt update
        sudo apt install -y libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev

    - name: Download and build zlib for cross-compilation
      run: |
        wget http://zlib.net/zlib-1.2.11.tar.gz
        tar -xzvf zlib-1.2.11.tar.gz
        cd zlib-1.2.11
        # 设置交叉编译环境，确保 zlib 使用正确的目标架构编译
        ./configure --prefix=/tmp/zlib --host=aarch64-w64-mingw32
        make
        make install

    - name: Download Nginx source
      run: |
        wget https://nginx.org/download/nginx-1.23.0.tar.gz
        tar -xzvf nginx-1.23.0.tar.gz

    - name: Configure Nginx for cross-compilation using LLVM
      run: |
        cd nginx-1.23.0
        export CC="clang --target=aarch64-w64-mingw32"
        export CXX="clang++ --target=aarch64-w64-mingw32"
        # 使用 zlib 的安装路径
        ./configure \
          --prefix=/tmp/nginx \
          --with-pcre \
          --with-openssl \
          --with-zlib=/tmp/zlib \
          --crossbuild=ARM64

    - name: Build Nginx for ARM64 Windows using LLVM
      run: |
        cd nginx-1.23.0
        make
        make install DESTDIR=/tmp/nginx-arm64

    - name: Create Windows ARM64 executable package
      run: |
        cd /tmp/nginx-arm64
        zip -r nginx-arm64.zip .

    - name: Upload the artifact
      uses: actions/upload-artifact@v4
      with:
        name: nginx-arm64
        path: /tmp/nginx-arm64/nginx-arm64.zip
